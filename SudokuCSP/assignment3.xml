<?xml version="1.0" encoding="UTF-8"?>
<logic>
    <parser-version>2.1</parser-version>
    <description>ALC Description Logic</description>
    <connector>
        <connector-name>not</connector-name>
        <arity>1</arity>
        <associative>false</associative>
        <output-format>~ _</output-format>
        <priority>0</priority>
        <connector-comment>Negation / complement</connector-comment>
    </connector>
    <connector>
        <connector-name>and</connector-name>
        <arity>2</arity>
        <associative>true</associative>
        <output-format>_ ^ _</output-format>
        <priority>0</priority>
        <connector-comment>And / Intersection</connector-comment>
    </connector>
    <connector>
        <connector-name>or</connector-name>
        <arity>2</arity>
        <associative>true</associative>
        <output-format>_ v _</output-format>
        <priority>0</priority>
        <connector-comment>Or / Union</connector-comment>
    </connector>
    <connector>
        <connector-name>some</connector-name>
        <arity>2</arity>
        <associative>false</associative>
        <output-format>_ some _</output-format>
        <priority>0</priority>
        <connector-comment>Existential Quantifier / Restriction</connector-comment>
    </connector>
    <connector>
        <connector-name>only</connector-name>
        <arity>2</arity>
        <associative>false</associative>
        <output-format>_ only _</output-format>
        <priority>0</priority>
        <connector-comment>Universal Quantifier / Restriction</connector-comment>
    </connector>
    <connector>
        <connector-name>tbox</connector-name>
        <arity>1</arity>
        <associative>false</associative>
        <output-format>T = _</output-format>
        <priority>0</priority>
        <connector-comment>TBox</connector-comment>
    </connector>
    <connector>
        <connector-name>true</connector-name>
        <arity>1</arity>
        <associative>false</associative>
        <output-format>TRUE _</output-format>
        <priority>0</priority>
        <connector-comment>Truth / Universal Concept</connector-comment>
    </connector>
    <connector>
        <connector-name>false</connector-name>
        <arity>1</arity>
        <associative>false</associative>
        <output-format>FALSE _</output-format>
        <priority>0</priority>
        <connector-comment>False / Bottom Concept</connector-comment>
    </connector>
    <connector>
        <connector-name>add</connector-name>
        <arity>2</arity>
        <associative>false</associative>
        <output-format>_ &amp; _</output-format>
        <priority>0</priority>
        <connector-comment>List of formulae</connector-comment>
    </connector>
    <connector>
        <connector-name>input</connector-name>
        <arity>2</arity>
        <associative>false</associative>
        <output-format>INPUT: TBox = _; ABox = _</output-format>
        <priority>0</priority>
        <connector-comment>Input of both TBox and ABox</connector-comment>
    </connector>
    <rule>
        <rule-name>OrRule</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>or variable x variable y</parameter>
        </condition>
        <action>
            <action-name>duplicate</action-name>
            <parameter>copy</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node</parameter>
            <parameter>variable x</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>copy.node</parameter>
            <parameter>variable y</parameter>
        </action>
        <rule-comment>Apply Or-rule; Split into two branches and check each possibility.</rule-comment>
    </rule>
    <rule>
        <rule-name>Clash</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>variable x</parameter>
        </condition>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>not variable x</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node</parameter>
            <parameter>CLASH</parameter>
        </action>
        <action>
            <action-name>stop</action-name>
            <parameter>node</parameter>
        </action>
        <rule-comment>Apply Clash-rule; There is a contradiction in the assumptions.</rule-comment>
    </rule>
    <rule>
        <rule-name>AddFromList</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>add variable x variable y</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node</parameter>
            <parameter>variable x</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node</parameter>
            <parameter>variable y</parameter>
        </action>
        <rule-comment>Assume the single elements of a list of two elements.</rule-comment>
    </rule>
    <rule>
        <rule-name>AndRule</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>and variable x variable y</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node</parameter>
            <parameter>variable x</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node</parameter>
            <parameter>variable y</parameter>
        </action>
        <rule-comment>Apply And-rule; Both elements are assumed individually.</rule-comment>
    </rule>
    <rule>
        <rule-name>Initiate</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>input variable x variable y</parameter>
        </condition>
        <action>
            <action-name>createNewNode</action-name>
            <parameter>node1</parameter>
        </action>
        <action>
            <action-name>link</action-name>
            <parameter>node</parameter>
            <parameter>node1</parameter>
            <parameter>StartTableau</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node</parameter>
            <parameter>variable x</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node1</parameter>
            <parameter>variable y</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>SomeRule</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>some variable r variable c</parameter>
        </condition>
        <action>
            <action-name>createNewNode</action-name>
            <parameter>nodeS</parameter>
        </action>
        <action>
            <action-name>link</action-name>
            <parameter>node</parameter>
            <parameter>nodeS</parameter>
            <parameter>variable r</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>nodeS</parameter>
            <parameter>variable c</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>OnlyRule</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>only variable r variable c</parameter>
        </condition>
        <condition>
            <condition-name>isLinked</condition-name>
            <parameter>node</parameter>
            <parameter>node1</parameter>
            <parameter>variable r</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node1</parameter>
            <parameter>variable c</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>TBoxRule</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>tbox variable x</parameter>
        </condition>
        <condition>
            <condition-name>isAncestor</condition-name>
            <parameter>node</parameter>
            <parameter>node1</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node1</parameter>
            <parameter>variable x</parameter>
        </action>
        <rule-comment>Transitive?</rule-comment>
    </rule>
    <rule>
        <rule-name>NewBoxRule</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>tbox variable x</parameter>
        </condition>
        <condition>
            <condition-name>isNewNode</condition-name>
            <parameter>node1</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node1</parameter>
            <parameter>variable x</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>Block</rule-name>
        <condition>
            <condition-name>contains</condition-name>
            <parameter>node</parameter>
            <parameter>node1</parameter>
        </condition>
        <condition>
            <condition-name>isLinked</condition-name>
            <parameter>node</parameter>
            <parameter>node1</parameter>
            <parameter>variable r</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node1</parameter>
            <parameter>BLOCKED</parameter>
        </action>
        <action>
            <action-name>link</action-name>
            <parameter>node</parameter>
            <parameter>node1</parameter>
            <parameter>Blocks</parameter>
        </action>
        <action>
            <action-name>stop</action-name>
            <parameter>node1</parameter>
        </action>
        <rule-comment>Block cycles; apply only if no rule but SomeRule is appliable</rule-comment>
    </rule>

    <strategy>
        <strategy-name>CoreStrat</strategy-name>
        <strategy-code>repeat
     TBoxRule
	Clash
     TBoxRule
	AndRule
     TBoxRule
	OrRule
     TBoxRule
	OnlyRule
     TBoxRule
	SomeRule
     TBoxRule
end
repeat TBoxRule end
Block</strategy-code>
        <strategy-comment/>
    </strategy>
    <strategy>
        <strategy-name>Strategy</strategy-name>
        <strategy-code>repeat
	Initiate
	AddFromList
end
CoreStrat
</strategy-code>
        <strategy-comment>Default strategy for description logic. First TBox initiation, then apply all rules.</strategy-comment>
    </strategy>
    <main-strategy>Strategy</main-strategy>
    <testing-formula>
        <formula-name>Modus Ponens</formula-name>
        <formula-code>add or not P Q P</formula-code>
        <formula-comment/>
    </testing-formula>
    <testing-formula>
        <formula-name/>
        <formula-code>add P or not P and P or P Q</formula-code>
        <formula-comment/>
    </testing-formula>
    <testing-formula>
        <formula-name/>
        <formula-code>input add tbox and P Q tbox or not P R or R Q</formula-code>
        <formula-comment/>
    </testing-formula>
    <testing-formula>
        <formula-name>Figure 1</formula-name>
        <formula-code>input add tbox some S C tbox only R or not C D some R and C D</formula-code>
        <formula-comment/>
    </testing-formula>
</logic>
