<?xml version="1.0" encoding="UTF-8"?>
<logic>
    <parser-version>2.1</parser-version>
    <description>ALC Description Logic</description>
    <connector>
        <connector-name>not</connector-name>
        <arity>1</arity>
        <associative>false</associative>
        <output-format>~ _</output-format>
        <priority>0</priority>
        <connector-comment>Negation / complement</connector-comment>
    </connector>
    <connector>
        <connector-name>and</connector-name>
        <arity>2</arity>
        <associative>true</associative>
        <output-format>_ ^ _</output-format>
        <priority>0</priority>
        <connector-comment>And / Intersection</connector-comment>
    </connector>
    <connector>
        <connector-name>or</connector-name>
        <arity>2</arity>
        <associative>true</associative>
        <output-format>_ v _</output-format>
        <priority>0</priority>
        <connector-comment>Or / Union</connector-comment>
    </connector>
    <connector>
        <connector-name>some</connector-name>
        <arity>2</arity>
        <associative>false</associative>
        <output-format>_ some _</output-format>
        <priority>0</priority>
        <connector-comment>Existential Quantifier / Restriction</connector-comment>
    </connector>
    <connector>
        <connector-name>only</connector-name>
        <arity>2</arity>
        <associative>false</associative>
        <output-format>_ only _</output-format>
        <priority>0</priority>
        <connector-comment>Universal Quantifier / Restriction</connector-comment>
    </connector>
    <connector>
        <connector-name>tbox</connector-name>
        <arity>1</arity>
        <associative>false</associative>
        <output-format>T = _</output-format>
        <priority>0</priority>
        <connector-comment>TBox</connector-comment>
    </connector>
    <connector>
        <connector-name>true</connector-name>
        <arity>1</arity>
        <associative>false</associative>
        <output-format>TRUE _</output-format>
        <priority>0</priority>
        <connector-comment>Truth / Universal Concept</connector-comment>
    </connector>
    <connector>
        <connector-name>false</connector-name>
        <arity>1</arity>
        <associative>false</associative>
        <output-format>FALSE _</output-format>
        <priority>0</priority>
        <connector-comment>False / Bottom Concept</connector-comment>
    </connector>
    <connector>
        <connector-name>add</connector-name>
        <arity>2</arity>
        <associative>false</associative>
        <output-format>_ &amp; _</output-format>
        <priority>0</priority>
        <connector-comment>List of formulae</connector-comment>
    </connector>
    <connector>
        <connector-name>input</connector-name>
        <arity>2</arity>
        <associative>false</associative>
        <output-format>INPUT: TBox = _; ABox = _</output-format>
        <priority>0</priority>
        <connector-comment>Input of both TBox and ABox</connector-comment>
    </connector>
    <connector>
        <connector-name>subrole</connector-name>
        <arity>2</arity>
        <associative>false</associative>
        <output-format>_ subrole of _</output-format>
        <priority>0</priority>
        <connector-comment/>
    </connector>
    <connector>
        <connector-name>trans</connector-name>
        <arity>1</arity>
        <associative>false</associative>
        <output-format>+_</output-format>
        <priority>0</priority>
        <connector-comment/>
    </connector>
    <rule>
        <rule-name>OrRule</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>or variable x variable y</parameter>
        </condition>
        <action>
            <action-name>duplicate</action-name>
            <parameter>copy</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node</parameter>
            <parameter>variable x</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>copy.node</parameter>
            <parameter>variable y</parameter>
        </action>
        <rule-comment>Apply Or-rule; Split into two branches, with each assuming one of the Or variables.</rule-comment>
    </rule>
    <rule>
        <rule-name>Clash</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>variable x</parameter>
        </condition>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>not variable x</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node</parameter>
            <parameter>CLASH</parameter>
        </action>
        <action>
            <action-name>stop</action-name>
            <parameter>node</parameter>
        </action>
        <rule-comment>Apply Clash-rule; There is a contradiction in the assumptions.</rule-comment>
    </rule>
    <rule>
        <rule-name>AddFromList</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>add variable x variable y</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node</parameter>
            <parameter>variable x</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node</parameter>
            <parameter>variable y</parameter>
        </action>
        <rule-comment>Assume the single elements of a list of two elements.</rule-comment>
    </rule>
    <rule>
        <rule-name>AndRule</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>and variable x variable y</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node</parameter>
            <parameter>variable x</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node</parameter>
            <parameter>variable y</parameter>
        </action>
        <rule-comment>Apply And-rule; Both elements are now also assumed individually.</rule-comment>
    </rule>
    <rule>
        <rule-name>Initiate</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>input variable x variable y</parameter>
        </condition>
        <action>
            <action-name>createNewNode</action-name>
            <parameter>node1</parameter>
        </action>
        <action>
            <action-name>link</action-name>
            <parameter>node</parameter>
            <parameter>node1</parameter>
            <parameter>StartTableau</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node</parameter>
            <parameter>variable x</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node1</parameter>
            <parameter>variable y</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>SomeRule</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>some variable r variable c</parameter>
        </condition>
        <condition>
            <condition-name>hasNotElement</condition-name>
            <parameter>node</parameter>
            <parameter>BLOCKED</parameter>
        </condition>
        <action>
            <action-name>createNewNode</action-name>
            <parameter>nodeS</parameter>
        </action>
        <action>
            <action-name>link</action-name>
            <parameter>node</parameter>
            <parameter>nodeS</parameter>
            <parameter>variable r</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>nodeS</parameter>
            <parameter>variable c</parameter>
        </action>
        <rule-comment>Prevent further application of the SomeRule if the node is BLOCKED</rule-comment>
    </rule>
    <rule>
        <rule-name>OnlyRule</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>only variable r variable c</parameter>
        </condition>
        <condition>
            <condition-name>isLinked</condition-name>
            <parameter>node</parameter>
            <parameter>node1</parameter>
            <parameter>variable r</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node1</parameter>
            <parameter>variable c</parameter>
        </action>
        <rule-comment>Assume variable C if all nodes related via R should have this assumption.</rule-comment>
    </rule>
    <rule>
        <rule-name>TBoxRule</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>tbox variable x</parameter>
        </condition>
        <condition>
            <condition-name>isAncestor</condition-name>
            <parameter>node</parameter>
            <parameter>node1</parameter>
        </condition>
        <condition>
            <condition-name>isNewNode</condition-name>
            <parameter>node1</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node1</parameter>
            <parameter>variable x</parameter>
        </action>
        <rule-comment>If node1 has an ancestor with TBox variables, it will assume these as well.</rule-comment>
    </rule>
    <rule>
        <rule-name>Block</rule-name>
        <condition>
            <condition-name>contains</condition-name>
            <parameter>node</parameter>
            <parameter>node1</parameter>
        </condition>
        <condition>
            <condition-name>isAncestor</condition-name>
            <parameter>node</parameter>
            <parameter>node1</parameter>
        </condition>
        <condition>
            <condition-name>isNewNode</condition-name>
            <parameter>node1</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node1</parameter>
            <parameter>BLOCKED</parameter>
        </action>
        <action>
            <action-name>link</action-name>
            <parameter>node</parameter>
            <parameter>node1</parameter>
            <parameter>Blocks</parameter>
        </action>
        <rule-comment>Block cycles; BLOCKED node will not use the SomeRule anymore</rule-comment>
    </rule>
    <rule>
        <rule-name>FalsumRule</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>false variable f</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node</parameter>
            <parameter>CLASH</parameter>
        </action>
        <action>
            <action-name>stop</action-name>
            <parameter>node</parameter>
        </action>
        <rule-comment>There is a contradiction (like Clash). False cannot be assumed to be True.</rule-comment>
    </rule>
    <rule>
        <rule-name>TruthRule</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>not true variable t</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node</parameter>
            <parameter>false variable t</parameter>
        </action>
        <rule-comment>Not True is False</rule-comment>
    </rule>
    <rule>
        <rule-name>SubRoleSome</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>subrole variable sub variable super</parameter>
        </condition>
        <condition>
            <condition-name>isAncestor</condition-name>
            <parameter>node</parameter>
            <parameter>child</parameter>
        </condition>
        <condition>
            <condition-name>isLinked</condition-name>
            <parameter>node</parameter>
            <parameter>child</parameter>
            <parameter>variable sub</parameter>
        </condition>
        <action>
            <action-name>link</action-name>
            <parameter>node</parameter>
            <parameter>child</parameter>
            <parameter>variable super</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>TransitiveRoleSome</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>trans variable t</parameter>
        </condition>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node</parameter>
            <parameter>some variable t some variable t variable b</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node</parameter>
            <parameter>some variable t variable b</parameter>
        </action>
        <rule-comment/>
    </rule>
    <strategy>
        <strategy-name>Strategy</strategy-name>
        <strategy-code>repeat
	Initiate
	AddFromList
	TBoxRule
end

repeat
firstRule
  TruthRule
  FalsumRule
  OnlyRule
  AndRule
  OrRule
  Clash
allRules
	Block
	SomeRule
	TBoxRule
end 
end
end
</strategy-code>
        <strategy-comment>Default strategy for description logic. First TBox initiation, then apply all rules.</strategy-comment>
    </strategy>
    <strategy>
        <strategy-name>StrategyWithRoleHierarchies</strategy-name>
        <strategy-code>repeat
	Initiate
	AddFromList
	TBoxRule
end

repeat
firstRule
  TruthRule
  FalsumRule
  SubRoleSome
  OnlyRule
  AndRule
  OrRule
  Clash
allRules
	Block
	SomeRule
	TBoxRule
end 
end
end
</strategy-code>
        <strategy-comment/>
    </strategy>
    <strategy>
        <strategy-name>StrategyWithTransitiveRoles</strategy-name>
        <strategy-code>repeat
	Initiate
	AddFromList
	TBoxRule
end

repeat
firstRule
  TruthRule
  FalsumRule
  TransitiveRoleSome
  OnlyRule
  AndRule
  OrRule
  Clash
allRules
	Block
	SomeRule
	TBoxRule
end 
end
end
</strategy-code>
        <strategy-comment/>
    </strategy>
    <strategy>
        <strategy-name>InefficientOrdering</strategy-name>
        <strategy-code>repeat
	Initiate
	AddFromList
	TBoxRule
end

repeat
firstRule
allRules
	Block
	SomeRule
	TBoxRule
end 
  TruthRule
  FalsumRule
  OnlyRule
  AndRule
  OrRule
  Clash
end
end
</strategy-code>
        <strategy-comment>Compare formula Exercise 2.2 with Strategy</strategy-comment>
    </strategy>
    <strategy>
        <strategy-name>WrongBlocking</strategy-name>
        <strategy-code>repeat
	Initiate
	AddFromList
	TBoxRule
end

repeat
firstRule
	Block
	SomeRule
	TBoxRule
  TruthRule
  FalsumRule
  OnlyRule
  AndRule
  OrRule
  Clash
end
end
</strategy-code>
        <strategy-comment>klopt nog niet</strategy-comment>
    </strategy>
    <strategy>
        <strategy-name>EfficientOrdering</strategy-name>
        <strategy-code>repeat
	Initiate
	AddFromList
	TBoxRule
end

repeat
firstRule
  Clash
  FalsumRule
  TruthRule
  OnlyRule
  AndRule
  OrRule
allRules
	Block
	applyOnce SomeRule
	TBoxRule
end 
end
end
</strategy-code>
        <strategy-comment/>
    </strategy>
    <main-strategy>EfficientOrdering</main-strategy>
    <testing-formula>
        <formula-name>Modus Ponens</formula-name>
        <formula-code>add or not P Q P</formula-code>
        <formula-comment/>
    </testing-formula>
    <testing-formula>
        <formula-name/>
        <formula-code>add P or not P and P or P Q</formula-code>
        <formula-comment/>
    </testing-formula>
    <testing-formula>
        <formula-name/>
        <formula-code>input add tbox and P Q tbox or not P R or R Q</formula-code>
        <formula-comment/>
    </testing-formula>
    <testing-formula>
        <formula-name>Figure 1</formula-name>
        <formula-code>input add tbox some S C tbox only R or not C D some R and C D</formula-code>
        <formula-comment/>
    </testing-formula>
    <testing-formula>
        <formula-name>Exercise 2.1</formula-name>
        <formula-code>input add tbox some S C tbox only R or false FALSE E some R D</formula-code>
        <formula-comment/>
    </testing-formula>
    <testing-formula>
        <formula-name>Exercise 2.2</formula-name>
        <formula-code>input add add tbox or not C not A tbox or not D only R or A B tbox or not E some R C and and D E only R not B</formula-code>
        <formula-comment/>
    </testing-formula>
    <testing-formula>
        <formula-name>experiment</formula-name>
        <formula-code>input tbox some R some S D X</formula-code>
        <formula-comment>To test the blocking rule</formula-comment>
    </testing-formula>
    <testing-formula>
        <formula-name>~c or ~d</formula-name>
        <formula-code>input add tbox some S C tbox some S D only S or not C not D</formula-code>
        <formula-comment/>
    </testing-formula>
    <testing-formula>
        <formula-name>Role Hierarchies</formula-name>
        <formula-code>input tbox some Painted Painting add only Created not Painting subrole Painted Created</formula-code>
        <formula-comment/>
    </testing-formula>
    <testing-formula>
        <formula-name>Transitive Roles</formula-name>
        <formula-code>input add tbox some HasPart some HasPart some HasPart Component tbox trans HasPart some HasPart Component</formula-code>
        <formula-comment/>
    </testing-formula>
    <testing-formula>
        <formula-name>Wrong Blocking</formula-name>
        <formula-code>input tbox A add only R some R not A some R A</formula-code>
        <formula-comment/>
    </testing-formula>
    <testing-formula>
        <formula-name>Efficient Strategy Tester</formula-name>
        <formula-code>add add add A not A and B or C D some X or A B</formula-code>
        <formula-comment/>
    </testing-formula>
</logic>
